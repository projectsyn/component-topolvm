parameters:
  topolvm:
    =_metadata: {}
    namespace: syn-topolvm

    ignore_alerts: []

    charts:
      topolvm:
        source: https://topolvm.github.io/topolvm
        version: v5.0.0

    images:
      topolvm:
        registry: quay.io
        repository: topolvm/topolvm-with-sidecar
        tag: 0.11.0

    deviceclasses: []

    storageclasses: {}

    # Resource limits
    resources:
      scheduler:
        requests:
          memory: 50Mi
          cpu: 50m
        limits:
          memory: 200Mi
          cpu: 200m
      lvmd:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 500Mi
          cpu: 500m
      node:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 500Mi
          cpu: 500m
      controller:
        requests:
          memory: 50Mi
          cpu: 50m
        limits:
          memory: 200Mi
          cpu: 200m

    helm_values:
      image:
        # image.repository -- TopoLVM image repository to use.
        repository: ${topolvm:images:topolvm:registry}/${topolvm:images:topolvm:repository}
        # image.tag -- TopoLVM image tag to use.
        tag: ${topolvm:images:topolvm:tag}
        # image.pullPolicy -- TopoLVM image pullPolicy.
        pullPolicy: IfNotPresent

      # scheduler extender for TopoLVM
      scheduler:
        # scheduler.enabled --  If true, enable scheduler extender for TopoLVM
        enabled: false
        # scheduler.resources -- Specify resources on the TopoLVM scheduler extender container.
        resources: ${topolvm:resources:scheduler}
        podDisruptionBudget:
          # Only configure scheduler PDB if the scheduler is actually enabled.
          # Otherwise we get unnecessary alert noise for the PDB because no
          # scheduler pods are running.
          enabled: ${topolvm:helm_values:scheduler:enabled}

      # lvmd service
      lvmd:
        # lvmd.managed -- If true, set up lvmd service with DaemonSet.
        managed: true
        # lvmd.resources -- Specify resources.
        resources: ${topolvm:resources:lvmd}
        # lvmd.deviceClasses -- Specify the device-class settings.
        deviceClasses: ${topolvm:deviceclasses}
        # lvmd.nodeSelector -- Specify nodeSelector.
        nodeSelector:
          syn.tools/topolvm: ""

      # storageClasses -- Whether to create storageclass(s)
      storageClasses: []

      # CSI node service
      node:
        # node.nodeSelector -- Specify nodeSelector.
        nodeSelector:
          syn.tools/topolvm: ""
        # node.resources -- Specify resources.
        resources: ${topolvm:resources:node}
        metrics:
          # node.metrics.enabled -- If true, enable scraping of metrics by Prometheus.
          enabled: true
          # node.metrics.annotations -- Annotations for Scrape used by Prometheus.
          annotations:
            prometheus.io/port: metrics
            prometheus.io/scrape: "true"
        prometheus:
          podMonitor:
            # node.prometheus.podMonitor.enabled -- Set this to `true` to create PodMonitor for Prometheus operator.
            enabled: true
            # node.prometheus.podMonitor.namespace -- Optional namespace in which to create PodMonitor.
            namespace: syn-topolvm

      # CSI controller service
      controller:
        storageCapacityTracking:
          # controller.storageCapacityTracking.enabled -- Enable Storage Capacity Tracking for csi-provisoner.
          enabled: true
        # controller.resources -- Specify resources.
        resources: ${topolvm:resources:controller}

      webhook:
        podMutatingWebhook:
          # webhook.podMutatingWebhook.enabled -- Enable Pod MutatingWebhook.
          enabled: false
